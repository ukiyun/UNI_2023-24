# Python Modules
from binascii import unhexlify
from scriptedPrime import closestPrime

# Function provided used to decode message
def dec(y, d, n):
    int_y = int.from_bytes(unhexlify(y), "little")
    x = pow(int_y,d,n)
    return x.to_bytes(256, 'little')

# Public Key
e = 65537
n = 359538626972463181545861038157804946723595395788461314546860162315465351611001926265416954644815072042240227759742786715317579537628833244985694861278971243146135638403756740005476362228600815351288481858812807445552284189996501896013041435503010713705189426005962420057108679785981920977128846367293882688819


# Text to decipher
ciphertext = "3861666438333061363430323863323333333436623437643233363735306364383935626634666238323434373031623065643030643162653839383261353735303965383964393937646335313730613238633465363739656332383961306432396130306631363762393862666663656235623031396231643430373861383536383039336333326537343861343338353038373064643766356662633337323738333263363734363034643733623231346565663939333638363436323737353732376561386632386136366235613234303932353033643838386636396233643833393730306361326131396363333239393536663264616439336230303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030"


# Finding the values of P and Q prime numbers

p = closestPrime(2**512)
q = closestPrime(2**513)


# pq = n

p_temp = p

while(True):
    
    # when the multiplication is inferior to the modulus
    while p * q < n:
        p = closestPrime(p)
        continue    
    
    if p * q == n:
        break
    
    q = closestPrime(q)
    p = p_temp
    

# Find out d value

phi = (p-1) * (q-1)

d = pow(e, -1, phi)

# decrypting the message and printing it

flag = dec(unhexlify(ciphertext), d, n).decode()

print(flag)
